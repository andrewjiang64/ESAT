import { Injectable } from '@angular/core';import { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';import { Observable, throwError } from 'rxjs';import { catchError, tap } from 'rxjs/operators';@Injectable()export class BaselineInfoService {    private BASE_URL = 'api/BaselineInformationData';    private BMPScopeAndIntelligence_BASE_URL = 'api/BMPScopeAndIntelligenceData';    private Project_BASE_URL = 'api/ProjectData';    private userdata: any;    constructor(private http: HttpClient) {    }    public GetSummarizationTypeList() {        this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));        var getBaseLineOptionsUrl = `${this.BASE_URL}/GetSummarizationTypeList`;        let headers = new HttpHeaders({ 'Content-Type': 'application/json' });        headers = headers.append('Authorization', 'Bearer ' + `${this.userdata.token}`);        return this.http.get<any>(getBaseLineOptionsUrl, { headers: headers }).pipe(tap(data => data),            catchError(this.handleError)        );    }    public GetSummaryGridData(summerizationLevelId, locationFilter_MunicipalityId, locationFilter_WatershedId, locationFilter_SubwatershedId, projectId) {        this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));        var getBaseLineOptionsUrl = `${this.BASE_URL}/GetSummaryGridData/${summerizationLevelId}/${locationFilter_MunicipalityId}/${locationFilter_WatershedId}/${locationFilter_SubwatershedId}/${projectId}/${this.userdata.userId}`;        let headers = new HttpHeaders({            Authorization: 'Bearer ' + this.userdata.token,            'Content-Type': 'application/json',            Accept: 'application/json, text/plain, */*'
        });        return this.http.get<any>(getBaseLineOptionsUrl, { headers: headers }).pipe(tap(data => data),            catchError(this.handleError)        );    }    public GetProjectMunicipalitiesByProjectId(projectId) {        this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));        var getUrl = `${this.BMPScopeAndIntelligence_BASE_URL}/GetProjectMunicipalitiesByProjectId/${projectId}/${this.userdata.userId}/${this.userdata.userTypeId}`;        let headers = new HttpHeaders({            Authorization: 'Bearer ' + this.userdata.token,            'Content-Type': 'application/json',            Accept: 'application/json, text/plain, */*'        });        return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),            catchError(this.handleError)        );    }    public GetProjectWatershedsByMunicipality(projectId, municipalityId) {        this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));        var getUrl = `${this.BMPScopeAndIntelligence_BASE_URL}/GetProjectWatershedsByMunicipality/${projectId}/${this.userdata.userId}/${this.userdata.userTypeId}/${municipalityId}`;        let headers = new HttpHeaders({            Authorization: 'Bearer ' + this.userdata.token,            'Content-Type': 'application/json',            Accept: 'application/json, text/plain, */*'        });        return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),            catchError(this.handleError)        );    }    public GetSubWatershedsByWatershedId(municipalityId, watershedId) {        this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));        var getUrl = `${this.BASE_URL}/GetSubWatershedsByWatershedId/${this.userdata.userId}/${this.userdata.userTypeId}/${municipalityId}/${watershedId}`;        let headers = new HttpHeaders({            Authorization: 'Bearer ' + this.userdata.token,            'Content-Type': 'application/json',            Accept: 'application/json, text/plain, */*'        });        return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),            catchError(this.handleError)        );    }    public GetBaselineBMPSummaryGridData(projectId) {        this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));        var getUrl = `${this.BASE_URL}/GetBaselineBMPSummaryData/${this.userdata.userId}/${projectId}`;        let headers = new HttpHeaders({            Authorization: 'Bearer ' + this.userdata.token,            'Content-Type': 'application/json',            Accept: 'application/json, text/plain, */*'        });        //headers = headers.append('Authorization', 'Bearer ' + `${this.userdata.token}`);        return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),            catchError(this.handleError)        );    }    public GetBaselineBMPEffectivenessGridData(projectId) {        this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));        var getUrl = `${this.BASE_URL}/GetBaselineBMPEffectivenessData/${this.userdata.userId}/${projectId}`;        let headers = new HttpHeaders({            Authorization: 'Bearer ' + this.userdata.token,            'Content-Type': 'application/json',            Accept: 'application/json, text/plain, */*'        });        //headers = headers.append('Authorization', 'Bearer ' + `${this.userdata.token}`);        return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),            catchError(this.handleError)        );    }    private handleError(error: HttpErrorResponse) {        if (error.error instanceof ErrorEvent) {            // A client-side or network error occurred. Handle it accordingly.            console.error('An error occurred:', error.error.message);        } else {            // The backend returned an unsuccessful response code.            // The response body may contain clues as to what went wrong,            console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);        }        // return an observable with a user-facing error message        return throwError('Something bad happened; please try again later.');    };}