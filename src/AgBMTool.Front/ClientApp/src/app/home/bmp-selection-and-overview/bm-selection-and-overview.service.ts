import { Injectable } from '@angular/core';import { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';import { Observable, throwError } from 'rxjs';import { catchError, tap } from 'rxjs/operators';@Injectable()export class BmpSelectionAndOverviewComponentService {  private BASE_URL = 'api/BMPScopeAndIntelligenceData';  private BaselineInfo_BASE_URL = 'api/BaselineInformationData';  private Project_BASE_URL = 'api/ProjectData';  private userdata: any;  constructor(private http: HttpClient) {  }  public GetSummaryGridData(projectId, bmptypeId) {    this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));    var getUrl = `${this.BASE_URL}/GetSingleBMPCostData/${projectId}/${bmptypeId}`;    let headers = new HttpHeaders({      Authorization: 'Bearer ' + this.userdata.token,      'Content-Type': 'application/json',      Accept: 'application/json, text/plain, */*'    });    return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),      catchError(this.handleError)    );  }  public getProjectBMPSummaryData(projectId) {    this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));    var getUrl = `${this.BASE_URL}/GetProjectBMPSummaryData/${projectId}/`;    let headers = new HttpHeaders({      Authorization: 'Bearer ' + this.userdata.token,      'Content-Type': 'application/json',      Accept: 'application/json, text/plain, */*'    });    return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),      catchError(this.handleError)    );  }  public getProjectEffectivenessSummary(projectId) {    this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));    var getUrl = `${this.BASE_URL}/getProjectEffectivenessSummary/${projectId}/`;    let headers = new HttpHeaders({      Authorization: 'Bearer ' + this.userdata.token,      'Content-Type': 'application/json',      Accept: 'application/json, text/plain, */*'    });    return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),      catchError(this.handleError)    );  }  public getLsdParcelStructuralBMPSummaryDTOsForBMPSelectionAndOverview(projectId) {    this.userdata = JSON.parse(localStorage.getItem("ManagerUser"));    var getUrl = `${this.BASE_URL}/getLsdParcelStructuralBMPSummaryDTOsForBMPSelectionAndOverview/${projectId}/`;    let headers = new HttpHeaders({      Authorization: 'Bearer ' + this.userdata.token,      'Content-Type': 'application/json',      Accept: 'application/json, text/plain, */*'    });    return this.http.get<any>(getUrl, { headers: headers }).pipe(tap(data => data),      catchError(this.handleError)    );  }  private handleError(error: HttpErrorResponse) {    if (error.error instanceof ErrorEvent) {      // A client-side or network error occurred. Handle it accordingly.      console.error('An error occurred:', error.error.message);    } else {      // The backend returned an unsuccessful response code.      // The response body may contain clues as to what went wrong,      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);    }    // return an observable with a user-facing error message    return throwError('Something bad happened; please try again later.');  };}