// <auto-generated />
using System;
using AgBMPTool.DBModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AgBMPTool.DBModel.Migrations
{
    [DbContext(typeof(AgBMPToolContext))]
    partial class AgBMPToolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Canada",
                            Name = "Canada",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "USA",
                            Name = "USA",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.Farm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Farm");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.GeometryLayerStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("color");

                    b.Property<string>("layername");

                    b.Property<string>("outlinecolor");

                    b.Property<string>("outlinestyle");

                    b.Property<string>("outlinewidth");

                    b.Property<string>("pointsize");

                    b.Property<string>("simplelinewidth");

                    b.Property<string>("style");

                    b.Property<string>("type");

                    b.HasKey("Id");

                    b.ToTable("GeometryLayerStyle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            color = "rgb(158, 0, 0, 0.6)",
                            layername = "Parcel",
                            outlinecolor = "white",
                            outlinewidth = "1",
                            simplelinewidth = "",
                            style = "vertical",
                            type = "simple-fill"
                        },
                        new
                        {
                            Id = 2,
                            color = "purple",
                            layername = "LSD",
                            outlinecolor = "white",
                            outlinewidth = "1",
                            simplelinewidth = "",
                            style = "horizontal",
                            type = "simple-fill"
                        },
                        new
                        {
                            Id = 3,
                            color = "blue",
                            layername = "Reach",
                            outlinecolor = "",
                            outlinewidth = "",
                            simplelinewidth = "4",
                            style = "",
                            type = "simple-line"
                        },
                        new
                        {
                            Id = 4,
                            color = "purple",
                            layername = "Farm",
                            outlinecolor = "white",
                            outlinewidth = "1",
                            simplelinewidth = "",
                            style = "horizontal",
                            type = "simple-fill"
                        },
                        new
                        {
                            Id = 5,
                            color = "blue",
                            layername = "Municipality",
                            outlinecolor = "white",
                            outlinewidth = "1",
                            simplelinewidth = "",
                            style = "diagonal-cross",
                            type = "simple-fill"
                        },
                        new
                        {
                            Id = 6,
                            color = "yellow",
                            layername = "SubWaterShed",
                            outlinecolor = "white",
                            outlinewidth = "1",
                            simplelinewidth = "",
                            style = "cross",
                            type = "simple-fill"
                        },
                        new
                        {
                            Id = 7,
                            color = "purple",
                            layername = "WaterShed",
                            outlinecolor = "white",
                            outlinewidth = "1",
                            simplelinewidth = "",
                            style = "backward-diagonal",
                            type = "simple-fill"
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.LegalSubDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("FullDescription");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<short>("LSD");

                    b.Property<short>("Meridian");

                    b.Property<string>("Quarter");

                    b.Property<short>("Range");

                    b.Property<short>("Section");

                    b.Property<short>("Township");

                    b.HasKey("Id");

                    b.ToTable("LegalSubDivision");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<string>("Name");

                    b.Property<string>("Region");

                    b.HasKey("Id");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("FullDescription");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<short>("Meridian");

                    b.Property<string>("Quarter");

                    b.Property<short>("Range");

                    b.Property<short>("Section");

                    b.Property<short>("Township");

                    b.HasKey("Id");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .HasMaxLength(2);

                    b.Property<int>("CountryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Description = "Alberta",
                            Name = "Alberta",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Description = "British Columbia",
                            Name = "British Columbia",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Description = "Manitoba",
                            Name = "Manitoba",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Description = "New Brunswick",
                            Name = "New Brunswick",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Description = "Newfoundland and Labrador",
                            Name = "Newfoundland and Labrador",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Description = "Nova Scotia",
                            Name = "Nova Scotia",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Description = "Ontario",
                            Name = "Ontario",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Description = "Prince Edward Island",
                            Name = "Prince Edward Island",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Description = "Quebec",
                            Name = "Quebec",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Description = "Saskatchewan",
                            Name = "Saskatchewan",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Description = "Northwest Territories",
                            Name = "Northwest Territories",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Description = "Nunavut",
                            Name = "Nunavut",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            Description = "Yukon Territory",
                            Name = "Yukon Territory",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 2,
                            Description = "Alabama",
                            Name = "Alabama",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 2,
                            Description = "Alaska",
                            Name = "Alaska",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 2,
                            Description = "Arizona",
                            Name = "Arizona",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 2,
                            Description = "Arkansas",
                            Name = "Arkansas",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 2,
                            Description = "California",
                            Name = "California",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 2,
                            Description = "Colorado",
                            Name = "Colorado",
                            SortOrder = 19
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 2,
                            Description = "Connecticut",
                            Name = "Connecticut",
                            SortOrder = 20
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 2,
                            Description = "Delaware",
                            Name = "Delaware",
                            SortOrder = 21
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 2,
                            Description = "Florida",
                            Name = "Florida",
                            SortOrder = 22
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 2,
                            Description = "Georgia",
                            Name = "Georgia",
                            SortOrder = 23
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 2,
                            Description = "Hawaii",
                            Name = "Hawaii",
                            SortOrder = 24
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 2,
                            Description = "Idaho",
                            Name = "Idaho",
                            SortOrder = 25
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 2,
                            Description = "Illinois",
                            Name = "Illinois",
                            SortOrder = 26
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 2,
                            Description = "Indiana",
                            Name = "Indiana",
                            SortOrder = 27
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 2,
                            Description = "Iowa",
                            Name = "Iowa",
                            SortOrder = 28
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 2,
                            Description = "Kansas",
                            Name = "Kansas",
                            SortOrder = 29
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 2,
                            Description = "Kentucky",
                            Name = "Kentucky",
                            SortOrder = 30
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 2,
                            Description = "Louisiana",
                            Name = "Louisiana",
                            SortOrder = 31
                        },
                        new
                        {
                            Id = 32,
                            CountryId = 2,
                            Description = "Maine",
                            Name = "Maine",
                            SortOrder = 32
                        },
                        new
                        {
                            Id = 33,
                            CountryId = 2,
                            Description = "Maryland",
                            Name = "Maryland",
                            SortOrder = 33
                        },
                        new
                        {
                            Id = 34,
                            CountryId = 2,
                            Description = "Massachusetts",
                            Name = "Massachusetts",
                            SortOrder = 34
                        },
                        new
                        {
                            Id = 35,
                            CountryId = 2,
                            Description = "Michigan",
                            Name = "Michigan",
                            SortOrder = 35
                        },
                        new
                        {
                            Id = 36,
                            CountryId = 2,
                            Description = "Minnesota",
                            Name = "Minnesota",
                            SortOrder = 36
                        },
                        new
                        {
                            Id = 37,
                            CountryId = 2,
                            Description = "Mississippi",
                            Name = "Mississippi",
                            SortOrder = 37
                        },
                        new
                        {
                            Id = 38,
                            CountryId = 2,
                            Description = "Missouri",
                            Name = "Missouri",
                            SortOrder = 38
                        },
                        new
                        {
                            Id = 39,
                            CountryId = 2,
                            Description = "Montana",
                            Name = "Montana",
                            SortOrder = 39
                        },
                        new
                        {
                            Id = 40,
                            CountryId = 2,
                            Description = "Nebraska",
                            Name = "Nebraska",
                            SortOrder = 40
                        },
                        new
                        {
                            Id = 41,
                            CountryId = 2,
                            Description = "Nevada",
                            Name = "Nevada",
                            SortOrder = 41
                        },
                        new
                        {
                            Id = 42,
                            CountryId = 2,
                            Description = "New Hampshire",
                            Name = "New Hampshire",
                            SortOrder = 42
                        },
                        new
                        {
                            Id = 43,
                            CountryId = 2,
                            Description = "New Jersey",
                            Name = "New Jersey",
                            SortOrder = 43
                        },
                        new
                        {
                            Id = 44,
                            CountryId = 2,
                            Description = "New Mexico",
                            Name = "New Mexico",
                            SortOrder = 44
                        },
                        new
                        {
                            Id = 45,
                            CountryId = 2,
                            Description = "New York",
                            Name = "New York",
                            SortOrder = 45
                        },
                        new
                        {
                            Id = 46,
                            CountryId = 2,
                            Description = "North Carolina",
                            Name = "North Carolina",
                            SortOrder = 46
                        },
                        new
                        {
                            Id = 47,
                            CountryId = 2,
                            Description = "North Dakota",
                            Name = "North Dakota",
                            SortOrder = 47
                        },
                        new
                        {
                            Id = 48,
                            CountryId = 2,
                            Description = "Ohio",
                            Name = "Ohio",
                            SortOrder = 48
                        },
                        new
                        {
                            Id = 49,
                            CountryId = 2,
                            Description = "Oklahoma",
                            Name = "Oklahoma",
                            SortOrder = 49
                        },
                        new
                        {
                            Id = 50,
                            CountryId = 2,
                            Description = "Oregon",
                            Name = "Oregon",
                            SortOrder = 50
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 2,
                            Description = "Pennsylvania",
                            Name = "Pennsylvania",
                            SortOrder = 51
                        },
                        new
                        {
                            Id = 52,
                            CountryId = 2,
                            Description = "Rhode Island",
                            Name = "Rhode Island",
                            SortOrder = 52
                        },
                        new
                        {
                            Id = 53,
                            CountryId = 2,
                            Description = "South Carolina",
                            Name = "South Carolina",
                            SortOrder = 53
                        },
                        new
                        {
                            Id = 54,
                            CountryId = 2,
                            Description = "South Dakota",
                            Name = "South Dakota",
                            SortOrder = 54
                        },
                        new
                        {
                            Id = 55,
                            CountryId = 2,
                            Description = "Tennessee",
                            Name = "Tennessee",
                            SortOrder = 55
                        },
                        new
                        {
                            Id = 56,
                            CountryId = 2,
                            Description = "Texas",
                            Name = "Texas",
                            SortOrder = 56
                        },
                        new
                        {
                            Id = 57,
                            CountryId = 2,
                            Description = "Utah",
                            Name = "Utah",
                            SortOrder = 57
                        },
                        new
                        {
                            Id = 58,
                            CountryId = 2,
                            Description = "Vermont",
                            Name = "Vermont",
                            SortOrder = 58
                        },
                        new
                        {
                            Id = 59,
                            CountryId = 2,
                            Description = "Virginia",
                            Name = "Virginia",
                            SortOrder = 59
                        },
                        new
                        {
                            Id = 60,
                            CountryId = 2,
                            Description = "Washington",
                            Name = "Washington",
                            SortOrder = 60
                        },
                        new
                        {
                            Id = 61,
                            CountryId = 2,
                            Description = "West Virginia",
                            Name = "West Virginia",
                            SortOrder = 61
                        },
                        new
                        {
                            Id = 62,
                            CountryId = 2,
                            Description = "Wisconsin",
                            Name = "Wisconsin",
                            SortOrder = 62
                        },
                        new
                        {
                            Id = 63,
                            CountryId = 2,
                            Description = "Wyoming",
                            Name = "Wyoming",
                            SortOrder = 63
                        },
                        new
                        {
                            Id = 64,
                            CountryId = 2,
                            Description = "Washington DC",
                            Name = "Washington DC",
                            SortOrder = 64
                        },
                        new
                        {
                            Id = 65,
                            CountryId = 2,
                            Description = "Puerto Rico",
                            Name = "Puerto Rico",
                            SortOrder = 65
                        },
                        new
                        {
                            Id = 66,
                            CountryId = 2,
                            Description = "U.S. Virgin Islands",
                            Name = "U.S. Virgin Islands",
                            SortOrder = 66
                        },
                        new
                        {
                            Id = 67,
                            CountryId = 2,
                            Description = "American Samoa",
                            Name = "American Samoa",
                            SortOrder = 67
                        },
                        new
                        {
                            Id = 68,
                            CountryId = 2,
                            Description = "Guam",
                            Name = "Guam",
                            SortOrder = 68
                        },
                        new
                        {
                            Id = 69,
                            CountryId = 2,
                            Description = "Northern Mariana Islands",
                            Name = "Northern Mariana Islands",
                            SortOrder = 69
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.AnimalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("AnimalType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dairy manure",
                            Name = "Dairy",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Beef manure",
                            Name = "Beef",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cow-Calf manure",
                            Name = "Cow-Calf",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Swine manure",
                            Name = "Swine",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sheep manure",
                            Name = "Sheep",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Goat manure",
                            Name = "Goat",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Horse manure",
                            Name = "Horse",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Description = "Turkey manure",
                            Name = "Turkey",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "Duck manure",
                            Name = "Duck",
                            SortOrder = 9
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.CatchBasin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(5,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(6,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("CatchBasin");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ClosedDrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPoint>("Geometry")
                        .HasColumnType("geometry (multipoint)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId");

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("ClosedDrain");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Dugout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AnimalTypeId");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(5,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(6,0)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Dugout");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Feedlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("AnimalAdultRatio")
                        .HasColumnType("numeric(3,3)");

                    b.Property<int>("AnimalNumber");

                    b.Property<int>("AnimalTypeId");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(5,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Feedlot");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.FlowDiversion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPoint>("Geometry")
                        .HasColumnType("geometry (multipoint)");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric(6,0)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("FlowDiversion");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.GrassedWaterway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric(5,0)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric(5,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("GrassedWaterway");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.IsolatedWetland", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(5,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(6,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("IsolatedWetland");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Lake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(5,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(6,4)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Lake");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ManureStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(5,4)");

                    b.Property<MultiPoint>("Geometry")
                        .HasColumnType("geometry (multipoint)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(6,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("ManureStorage");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<int>("ModelComponentTypeId");

                    b.Property<int>("ModelId");

                    b.Property<string>("Name");

                    b.Property<int>("WatershedId");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentTypeId");

                    b.HasIndex("WatershedId");

                    b.ToTable("ModelComponent");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ModelComponentBMPTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPTypeId");

                    b.Property<int>("ModelComponentId");

                    b.HasKey("Id");

                    b.HasIndex("BMPTypeId");

                    b.HasIndex("ModelComponentId");

                    b.ToTable("ModelComponentBMPTypes");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ModelComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsStructure");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ModelComponentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic unit of ESAT dataset (intersect between parcel, LSD, and subbasin)",
                            IsStructure = false,
                            Name = "SubArea",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Reach",
                            IsStructure = false,
                            Name = "Reach",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Isolated wetland",
                            IsStructure = true,
                            Name = "IsolatedWetland",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Riparian wetland",
                            IsStructure = true,
                            Name = "RiparianWetland",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lake",
                            IsStructure = true,
                            Name = "Lake",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Vegetative filter strip",
                            IsStructure = true,
                            Name = "VegetativeFilterStrip",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Riparian buffer",
                            IsStructure = true,
                            Name = "RiparianBuffer",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Description = "Grassed waterway",
                            IsStructure = true,
                            Name = "GrassedWaterway",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "Flow diversion",
                            IsStructure = true,
                            Name = "FlowDiversion",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = 10,
                            Description = "Reservoir",
                            IsStructure = true,
                            Name = "Reservoir",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 11,
                            Description = "Small dam",
                            IsStructure = true,
                            Name = "SmallDam",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = 12,
                            Description = "Water and sediment control basin",
                            IsStructure = true,
                            Name = "Wascob",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = 13,
                            Description = "Small water pond for animal drinking",
                            IsStructure = true,
                            Name = "Dugout",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = 14,
                            Description = "Used to control surface runoff from a feeding operation or manure storage facility",
                            IsStructure = true,
                            Name = "CatchBasin",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = 15,
                            Description = "Animal feeding operation with an intensive animal farming ",
                            IsStructure = true,
                            Name = "Feedlot",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = 16,
                            Description = "On-farm manure storage",
                            IsStructure = true,
                            Name = "ManureStorage",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = 17,
                            Description = "A structure that directs flow to a stream ",
                            IsStructure = true,
                            Name = "RockChute",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = 18,
                            Description = "Point source",
                            IsStructure = true,
                            Name = "PointSource",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = 19,
                            Description = "An underground pipe that directs head surface water to a mainstream",
                            IsStructure = true,
                            Name = "ClosedDrain",
                            SortOrder = 19
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.PointSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPoint>("Geometry")
                        .HasColumnType("geometry (multipoint)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("PointSource");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Reach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiLineString>("Geometry")
                        .HasColumnType("geometry (multilinestring)");

                    b.Property<int>("ModelComponentId");

                    b.Property<int>("SubbasinId");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("SubbasinId")
                        .IsUnique();

                    b.ToTable("Reach");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Reservoir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(12,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(12,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Reservoir");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.RiparianBuffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal>("AreaRatio")
                        .HasColumnType("numeric(12,0)");

                    b.Property<Polygon>("DrainageArea")
                        .HasColumnType("geometry (polygon)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric(5,0)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric(5,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("RiparianBuffer");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.RiparianWetland", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(5,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(6,4)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("RiparianWetland");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.RockChute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPoint>("Geometry")
                        .HasColumnType("geometry (multipoint)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("RockChute");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.SmallDam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(12,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(12,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("SmallDam");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.SubArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area");

                    b.Property<decimal>("Elevation");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<string>("LandUse");

                    b.Property<int>("LegalSubDivisionId");

                    b.Property<int>("ModelComponentId");

                    b.Property<int>("ParcelId");

                    b.Property<decimal>("Slope");

                    b.Property<string>("SoilTexture");

                    b.Property<int>("SubbasinId");

                    b.HasKey("Id");

                    b.HasIndex("LegalSubDivisionId");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.HasIndex("SubbasinId");

                    b.ToTable("SubArea");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.SubWatershed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Alias");

                    b.Property<decimal>("Area");

                    b.Property<string>("Description");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<string>("Name");

                    b.Property<int>("WatershedId");

                    b.HasKey("Id");

                    b.HasIndex("WatershedId");

                    b.ToTable("SubWatershed");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Subbasin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("SubWatershedId");

                    b.HasKey("Id");

                    b.HasIndex("SubWatershedId");

                    b.ToTable("Subbasin");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.VegetativeFilterStrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(12,4)");

                    b.Property<decimal>("AreaRatio")
                        .HasColumnType("numeric(12,0)");

                    b.Property<Polygon>("DrainageArea")
                        .HasColumnType("geometry (polygon)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric(5,0)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric(5,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("VegetativeFilterStrip");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Wascob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric(12,4)");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<int>("ModelComponentId");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReachId");

                    b.Property<int>("SubAreaId");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(12,0)");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId")
                        .IsUnique();

                    b.HasIndex("ReachId");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Wascob");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Watershed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Alias");

                    b.Property<decimal>("Area");

                    b.Property<string>("Description");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry (multipolygon)");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<string>("Name");

                    b.Property<int>("OutletReachId");

                    b.HasKey("Id");

                    b.ToTable("Watershed");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.Optimization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<decimal?>("BudgetTarget");

                    b.Property<int>("OptimizationTypeId");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("OptimizationTypeId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Optimization");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationConstraintValueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OptimizationConstraintValueType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Percentage",
                            IsDefault = true,
                            Name = "Percentage",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Absolute Value",
                            IsDefault = false,
                            Name = "Absolute Value",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationConstraints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPEffectivenessTypeId");

                    b.Property<decimal>("Constraint");

                    b.Property<int>("OptimizationConstraintValueTypeId");

                    b.Property<int>("OptimizationId");

                    b.HasKey("Id");

                    b.HasIndex("BMPEffectivenessTypeId");

                    b.HasIndex("OptimizationConstraintValueTypeId");

                    b.HasIndex("OptimizationId");

                    b.ToTable("OptimizationConstraints");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationLegalSubDivisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPTypeId");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("LegalSubDivisionId");

                    b.Property<int>("OptimizationId");

                    b.HasKey("Id");

                    b.HasIndex("BMPTypeId");

                    b.HasIndex("LegalSubDivisionId");

                    b.HasIndex("OptimizationId");

                    b.ToTable("OptimizationLegalSubDivisions");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationParcels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPTypeId");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("OptimizationId");

                    b.Property<int>("ParcelId");

                    b.HasKey("Id");

                    b.HasIndex("BMPTypeId");

                    b.HasIndex("OptimizationId");

                    b.HasIndex("ParcelId");

                    b.ToTable("OptimizationParcels");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("OptimizationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Eco-service",
                            IsDefault = false,
                            Name = "Eco-service",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Budget",
                            IsDefault = true,
                            Name = "Budget",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationWeights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPEffectivenessTypeId");

                    b.Property<int>("OptimizationId");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BMPEffectivenessTypeId");

                    b.HasIndex("OptimizationId");

                    b.ToTable("OptimizationWeights");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Project.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<int>("EndYear");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectSpatialUnitTypeId");

                    b.Property<int>("ScenarioTypeId");

                    b.Property<int>("StartYear");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectSpatialUnitTypeId");

                    b.HasIndex("ScenarioTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Project.ProjectMunicipalities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("MunicipalityId");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMunicipalities");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Project.ProjectSpatialUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ProjectSpatialUnitType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "LSD",
                            IsDefault = false,
                            Name = "LSD",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Parcel",
                            IsDefault = true,
                            Name = "Parcel",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Project.ProjectWatersheds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ProjectId");

                    b.Property<int>("WatershedId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WatershedId");

                    b.ToTable("ProjectWatersheds");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPCombinationBMPTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPCombinationTypeId");

                    b.Property<int>("BMPTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BMPCombinationTypeId");

                    b.HasIndex("BMPTypeId");

                    b.ToTable("BMPCombinationBMPTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BMPCombinationTypeId = 1,
                            BMPTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            BMPCombinationTypeId = 2,
                            BMPTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            BMPCombinationTypeId = 3,
                            BMPTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            BMPCombinationTypeId = 4,
                            BMPTypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            BMPCombinationTypeId = 5,
                            BMPTypeId = 5
                        },
                        new
                        {
                            Id = 6,
                            BMPCombinationTypeId = 6,
                            BMPTypeId = 6
                        },
                        new
                        {
                            Id = 7,
                            BMPCombinationTypeId = 7,
                            BMPTypeId = 7
                        },
                        new
                        {
                            Id = 8,
                            BMPCombinationTypeId = 8,
                            BMPTypeId = 8
                        },
                        new
                        {
                            Id = 9,
                            BMPCombinationTypeId = 9,
                            BMPTypeId = 9
                        },
                        new
                        {
                            Id = 10,
                            BMPCombinationTypeId = 10,
                            BMPTypeId = 10
                        },
                        new
                        {
                            Id = 11,
                            BMPCombinationTypeId = 11,
                            BMPTypeId = 11
                        },
                        new
                        {
                            Id = 12,
                            BMPCombinationTypeId = 12,
                            BMPTypeId = 12
                        },
                        new
                        {
                            Id = 13,
                            BMPCombinationTypeId = 13,
                            BMPTypeId = 13
                        },
                        new
                        {
                            Id = 14,
                            BMPCombinationTypeId = 14,
                            BMPTypeId = 14
                        },
                        new
                        {
                            Id = 15,
                            BMPCombinationTypeId = 15,
                            BMPTypeId = 15
                        },
                        new
                        {
                            Id = 16,
                            BMPCombinationTypeId = 16,
                            BMPTypeId = 16
                        },
                        new
                        {
                            Id = 17,
                            BMPCombinationTypeId = 17,
                            BMPTypeId = 17
                        },
                        new
                        {
                            Id = 18,
                            BMPCombinationTypeId = 18,
                            BMPTypeId = 18
                        },
                        new
                        {
                            Id = 19,
                            BMPCombinationTypeId = 19,
                            BMPTypeId = 19
                        },
                        new
                        {
                            Id = 20,
                            BMPCombinationTypeId = 20,
                            BMPTypeId = 20
                        },
                        new
                        {
                            Id = 21,
                            BMPCombinationTypeId = 21,
                            BMPTypeId = 21
                        },
                        new
                        {
                            Id = 22,
                            BMPCombinationTypeId = 22,
                            BMPTypeId = 22
                        },
                        new
                        {
                            Id = 23,
                            BMPCombinationTypeId = 23,
                            BMPTypeId = 23
                        },
                        new
                        {
                            Id = 24,
                            BMPCombinationTypeId = 24,
                            BMPTypeId = 24
                        },
                        new
                        {
                            Id = 25,
                            BMPCombinationTypeId = 25,
                            BMPTypeId = 25
                        },
                        new
                        {
                            Id = 26,
                            BMPCombinationTypeId = 26,
                            BMPTypeId = 26
                        },
                        new
                        {
                            Id = 27,
                            BMPCombinationTypeId = 27,
                            BMPTypeId = 27
                        },
                        new
                        {
                            Id = 28,
                            BMPCombinationTypeId = 28,
                            BMPTypeId = 28
                        },
                        new
                        {
                            Id = 29,
                            BMPCombinationTypeId = 29,
                            BMPTypeId = 29
                        },
                        new
                        {
                            Id = 30,
                            BMPCombinationTypeId = 30,
                            BMPTypeId = 30
                        },
                        new
                        {
                            Id = 31,
                            BMPCombinationTypeId = 31,
                            BMPTypeId = 31
                        },
                        new
                        {
                            Id = 32,
                            BMPCombinationTypeId = 32,
                            BMPTypeId = 32
                        },
                        new
                        {
                            Id = 33,
                            BMPCombinationTypeId = 33,
                            BMPTypeId = 33
                        },
                        new
                        {
                            Id = 34,
                            BMPCombinationTypeId = 34,
                            BMPTypeId = 34
                        },
                        new
                        {
                            Id = 35,
                            BMPCombinationTypeId = 35,
                            BMPTypeId = 35
                        },
                        new
                        {
                            Id = 36,
                            BMPCombinationTypeId = 36,
                            BMPTypeId = 36
                        },
                        new
                        {
                            Id = 37,
                            BMPCombinationTypeId = 37,
                            BMPTypeId = 37
                        },
                        new
                        {
                            Id = 38,
                            BMPCombinationTypeId = 38,
                            BMPTypeId = 38
                        },
                        new
                        {
                            Id = 39,
                            BMPCombinationTypeId = 39,
                            BMPTypeId = 39
                        },
                        new
                        {
                            Id = 40,
                            BMPCombinationTypeId = 40,
                            BMPTypeId = 40
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPCombinationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BMPCombinationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Isolated wetland ",
                            Name = "ISWET",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Riparian wetland ",
                            Name = "RIWET",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lake ",
                            Name = "LAKE",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Vegetative filter strip",
                            Name = "VFST",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Riparian buffer",
                            Name = "RIBUF",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Grassed waterway",
                            Name = "GWW",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Flow diversion",
                            Name = "FLDV",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Description = "Reservoir ",
                            Name = "RESV",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "Small dam",
                            Name = "SMDM",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = 10,
                            Description = "Water and sediment control basin",
                            Name = "WASCOB",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 11,
                            Description = "Closed drain",
                            Name = "CLDR",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = 12,
                            Description = "Dugout",
                            Name = "DGOT",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = 13,
                            Description = "Manure catch basin/impondment",
                            Name = "MCBI",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = 14,
                            Description = "Livestock feedlot ",
                            Name = "FDLT",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = 15,
                            Description = "Manure storage ",
                            Name = "MSCD",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = 16,
                            Description = "Rock chute",
                            Name = "RKCH",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = 17,
                            Description = "Point source ",
                            Name = "PTSR",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = 18,
                            Description = "Manure incorporation with 48h",
                            Name = "MI48H",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = 19,
                            Description = "Manure application setback",
                            Name = "MASB",
                            SortOrder = 19
                        },
                        new
                        {
                            Id = 20,
                            Description = "No manure application on snow",
                            Name = "NAOS",
                            SortOrder = 20
                        },
                        new
                        {
                            Id = 21,
                            Description = "Manure application in spring rather than fall",
                            Name = "SAFA",
                            SortOrder = 21
                        },
                        new
                        {
                            Id = 22,
                            Description = "Manure application based on soil nitrogen limit",
                            Name = "ASNL",
                            SortOrder = 22
                        },
                        new
                        {
                            Id = 23,
                            Description = "Manure application based on soil phosphorous limit",
                            Name = "ASPL",
                            SortOrder = 23
                        },
                        new
                        {
                            Id = 24,
                            Description = "Livestock wintering site",
                            Name = "WSMG",
                            SortOrder = 24
                        },
                        new
                        {
                            Id = 25,
                            Description = "Livestock off-site watering",
                            Name = "OFSW",
                            SortOrder = 25
                        },
                        new
                        {
                            Id = 26,
                            Description = "Livestock stream access management",
                            Name = "SAMG",
                            SortOrder = 26
                        },
                        new
                        {
                            Id = 27,
                            Description = "Rotational grazing",
                            Name = "ROGZ",
                            SortOrder = 27
                        },
                        new
                        {
                            Id = 28,
                            Description = "Windbreak",
                            Name = "WDBR",
                            SortOrder = 28
                        },
                        new
                        {
                            Id = 29,
                            Description = "Cover crop",
                            Name = "CVCR",
                            SortOrder = 29
                        },
                        new
                        {
                            Id = 30,
                            Description = "Conservation tillage",
                            Name = "CSTL",
                            SortOrder = 30
                        },
                        new
                        {
                            Id = 31,
                            Description = "Crop rotation",
                            Name = "CRRO",
                            SortOrder = 31
                        },
                        new
                        {
                            Id = 32,
                            Description = "Forage conversion",
                            Name = "FRCV",
                            SortOrder = 32
                        },
                        new
                        {
                            Id = 33,
                            Description = "Tile drain management",
                            Name = "TLDMG",
                            SortOrder = 33
                        },
                        new
                        {
                            Id = 34,
                            Description = "Terrace",
                            Name = "TERR",
                            SortOrder = 34
                        },
                        new
                        {
                            Id = 35,
                            Description = "Residule management",
                            Name = "RDMG",
                            SortOrder = 35
                        },
                        new
                        {
                            Id = 36,
                            Description = "Minimum tillage on high slope",
                            Name = "MTHS",
                            SortOrder = 36
                        },
                        new
                        {
                            Id = 37,
                            Description = "Plant species in tame pasture",
                            Name = "PSTPS",
                            SortOrder = 37
                        },
                        new
                        {
                            Id = 38,
                            Description = "Sustainable use of natural area",
                            Name = "SUNA",
                            SortOrder = 38
                        },
                        new
                        {
                            Id = 39,
                            Description = "Irrigation management",
                            Name = "IRRMG",
                            SortOrder = 39
                        },
                        new
                        {
                            Id = 40,
                            Description = "Fertilizer management",
                            Name = "FERMG",
                            SortOrder = 40
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPEffectivenessLocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("BMPEffectivenessLocationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Onsite",
                            IsDefault = false,
                            Name = "Onsite",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Offsite",
                            IsDefault = true,
                            Name = "Offsite",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPEffectivenessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPEffectivenessLocationTypeId");

                    b.Property<decimal?>("DefaultConstraint");

                    b.Property<int?>("DefaultConstraintTypeId");

                    b.Property<int>("DefaultWeight");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ScenarioModelResultTypeId");

                    b.Property<int?>("ScenarioModelResultVariableTypeId");

                    b.Property<int>("SortOrder");

                    b.Property<int>("UnitTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BMPEffectivenessLocationTypeId");

                    b.HasIndex("DefaultConstraintTypeId");

                    b.HasIndex("ScenarioModelResultTypeId");

                    b.HasIndex("ScenarioModelResultVariableTypeId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("BMPEffectivenessType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on annual average soil water",
                            Name = "Soil moisture onsite",
                            ScenarioModelResultTypeId = 3,
                            ScenarioModelResultVariableTypeId = 3,
                            SortOrder = 1,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly ET",
                            Name = "ET onsite",
                            ScenarioModelResultTypeId = 4,
                            ScenarioModelResultVariableTypeId = 4,
                            SortOrder = 2,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly GW recharge",
                            Name = "Groundwater recharge onsite",
                            ScenarioModelResultTypeId = 5,
                            ScenarioModelResultVariableTypeId = 5,
                            SortOrder = 3,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly runoff",
                            Name = "Runoff onsite",
                            ScenarioModelResultTypeId = 6,
                            ScenarioModelResultVariableTypeId = 6,
                            SortOrder = 4,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly TSS",
                            Name = "TSS onsite",
                            ScenarioModelResultTypeId = 7,
                            ScenarioModelResultVariableTypeId = 7,
                            SortOrder = 5,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly DN",
                            Name = "DN onsite",
                            ScenarioModelResultTypeId = 8,
                            ScenarioModelResultVariableTypeId = 8,
                            SortOrder = 6,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly PN",
                            Name = "PN onsite",
                            ScenarioModelResultTypeId = 9,
                            ScenarioModelResultVariableTypeId = 9,
                            SortOrder = 7,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly TN",
                            Name = "TN onsite",
                            ScenarioModelResultTypeId = 10,
                            ScenarioModelResultVariableTypeId = 10,
                            SortOrder = 8,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly DP",
                            Name = "DP onsite",
                            ScenarioModelResultTypeId = 11,
                            ScenarioModelResultVariableTypeId = 11,
                            SortOrder = 9,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly PP",
                            Name = "PP onsite",
                            ScenarioModelResultTypeId = 12,
                            ScenarioModelResultVariableTypeId = 12,
                            SortOrder = 10,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly TP",
                            Name = "TP onsite",
                            ScenarioModelResultTypeId = 13,
                            ScenarioModelResultVariableTypeId = 13,
                            SortOrder = 11,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly soil carbon",
                            Name = "Soil carbon onsite",
                            ScenarioModelResultTypeId = 14,
                            ScenarioModelResultVariableTypeId = 14,
                            SortOrder = 12,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 13,
                            BMPEffectivenessLocationTypeId = 1,
                            DefaultWeight = 0,
                            Description = "BMP onsite effectiveness on yearly biodiversity index",
                            Name = "Biodiversity onsite",
                            ScenarioModelResultTypeId = 15,
                            ScenarioModelResultVariableTypeId = 15,
                            SortOrder = 13,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 14,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP offsite effectiveness on yearly outlet flow rate",
                            Name = "Runoff offsite",
                            ScenarioModelResultTypeId = 16,
                            ScenarioModelResultVariableTypeId = 16,
                            SortOrder = 14,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 15,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP offsite effectiveness on yearly outlet TSS",
                            Name = "TSS offsite",
                            ScenarioModelResultTypeId = 17,
                            ScenarioModelResultVariableTypeId = 7,
                            SortOrder = 15,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 16,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP offsite effectiveness on yearly outlet DN",
                            Name = "DN offsite",
                            ScenarioModelResultTypeId = 18,
                            ScenarioModelResultVariableTypeId = 8,
                            SortOrder = 16,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 17,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP offsite effectiveness on yearly outlet PN",
                            Name = "PN offsite",
                            ScenarioModelResultTypeId = 19,
                            ScenarioModelResultVariableTypeId = 9,
                            SortOrder = 17,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 18,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP offsite effectiveness on yearly outlet TN",
                            Name = "TN offsite",
                            ScenarioModelResultTypeId = 20,
                            ScenarioModelResultVariableTypeId = 10,
                            SortOrder = 18,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 19,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP offsite effectiveness on yearly outlet DP",
                            Name = "DP offsite",
                            ScenarioModelResultTypeId = 21,
                            ScenarioModelResultVariableTypeId = 11,
                            SortOrder = 19,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP offsite effectiveness on yearly outlet PP",
                            Name = "PP offsite",
                            ScenarioModelResultTypeId = 22,
                            ScenarioModelResultVariableTypeId = 12,
                            SortOrder = 20,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 21,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultConstraint = 20m,
                            DefaultConstraintTypeId = 1,
                            DefaultWeight = 100,
                            Description = "BMP offsite effectiveness on yearly outlet TP",
                            Name = "TP offsite",
                            ScenarioModelResultTypeId = 23,
                            ScenarioModelResultVariableTypeId = 13,
                            SortOrder = 21,
                            UnitTypeId = 2
                        },
                        new
                        {
                            Id = 22,
                            BMPEffectivenessLocationTypeId = 2,
                            DefaultWeight = 0,
                            Description = "BMP yearly cost",
                            Name = "BMP cost",
                            SortOrder = 22,
                            UnitTypeId = 12
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<int>("ModelComponentTypeId");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentTypeId");

                    b.ToTable("BMPType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Isolated wetland ",
                            ModelComponentTypeId = 3,
                            Name = "ISWET",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Riparian wetland ",
                            ModelComponentTypeId = 4,
                            Name = "RIWET",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lake ",
                            ModelComponentTypeId = 5,
                            Name = "LAKE",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Vegetative filter strip",
                            ModelComponentTypeId = 1,
                            Name = "VFST",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Riparian buffer",
                            ModelComponentTypeId = 1,
                            Name = "RIBUF",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Grassed waterway",
                            ModelComponentTypeId = 1,
                            Name = "GWW",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Flow diversion",
                            ModelComponentTypeId = 9,
                            Name = "FLDV",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Description = "Reservoir ",
                            ModelComponentTypeId = 10,
                            Name = "RESV",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "Small dam",
                            ModelComponentTypeId = 11,
                            Name = "SMDM",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = 10,
                            Description = "Water and sediment control basin",
                            ModelComponentTypeId = 12,
                            Name = "WASCOB",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 11,
                            Description = "Closed drain",
                            ModelComponentTypeId = 19,
                            Name = "CLDR",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = 12,
                            Description = "Dugout",
                            ModelComponentTypeId = 13,
                            Name = "DGOT",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = 13,
                            Description = "Manure catch basin/impondment",
                            ModelComponentTypeId = 14,
                            Name = "MCBI",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = 14,
                            Description = "Livestock feedlot ",
                            ModelComponentTypeId = 15,
                            Name = "FDLT",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = 15,
                            Description = "Manure storage ",
                            ModelComponentTypeId = 16,
                            Name = "MSCD",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = 16,
                            Description = "Rock chute",
                            ModelComponentTypeId = 17,
                            Name = "RKCH",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = 17,
                            Description = "Point source ",
                            ModelComponentTypeId = 18,
                            Name = "PTSR",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = 18,
                            Description = "Manure incorporation with 48h",
                            ModelComponentTypeId = 1,
                            Name = "MI48H",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = 19,
                            Description = "Manure application setback",
                            ModelComponentTypeId = 1,
                            Name = "MASB",
                            SortOrder = 19
                        },
                        new
                        {
                            Id = 20,
                            Description = "No manure application on snow",
                            ModelComponentTypeId = 1,
                            Name = "NAOS",
                            SortOrder = 20
                        },
                        new
                        {
                            Id = 21,
                            Description = "Manure application in spring rather than fall",
                            ModelComponentTypeId = 1,
                            Name = "SAFA",
                            SortOrder = 21
                        },
                        new
                        {
                            Id = 22,
                            Description = "Manure application based on soil nitrogen limit",
                            ModelComponentTypeId = 1,
                            Name = "ASNL",
                            SortOrder = 22
                        },
                        new
                        {
                            Id = 23,
                            Description = "Manure application based on soil phosphorous limit",
                            ModelComponentTypeId = 1,
                            Name = "ASPL",
                            SortOrder = 23
                        },
                        new
                        {
                            Id = 24,
                            Description = "Livestock wintering site",
                            ModelComponentTypeId = 1,
                            Name = "WSMG",
                            SortOrder = 24
                        },
                        new
                        {
                            Id = 25,
                            Description = "Livestock off-site watering",
                            ModelComponentTypeId = 1,
                            Name = "OFSW",
                            SortOrder = 25
                        },
                        new
                        {
                            Id = 26,
                            Description = "Livestock stream access management",
                            ModelComponentTypeId = 1,
                            Name = "SAMG",
                            SortOrder = 26
                        },
                        new
                        {
                            Id = 27,
                            Description = "Rotational grazing",
                            ModelComponentTypeId = 1,
                            Name = "ROGZ",
                            SortOrder = 27
                        },
                        new
                        {
                            Id = 28,
                            Description = "Windbreak",
                            ModelComponentTypeId = 1,
                            Name = "WDBR",
                            SortOrder = 28
                        },
                        new
                        {
                            Id = 29,
                            Description = "Cover crop",
                            ModelComponentTypeId = 1,
                            Name = "CVCR",
                            SortOrder = 29
                        },
                        new
                        {
                            Id = 30,
                            Description = "Conservation tillage",
                            ModelComponentTypeId = 1,
                            Name = "CSTL",
                            SortOrder = 30
                        },
                        new
                        {
                            Id = 31,
                            Description = "Crop rotation",
                            ModelComponentTypeId = 1,
                            Name = "CRRO",
                            SortOrder = 31
                        },
                        new
                        {
                            Id = 32,
                            Description = "Forage conversion",
                            ModelComponentTypeId = 1,
                            Name = "FRCV",
                            SortOrder = 32
                        },
                        new
                        {
                            Id = 33,
                            Description = "Tile drain management",
                            ModelComponentTypeId = 1,
                            Name = "TLDMG",
                            SortOrder = 33
                        },
                        new
                        {
                            Id = 34,
                            Description = "Terrace",
                            ModelComponentTypeId = 1,
                            Name = "TERR",
                            SortOrder = 34
                        },
                        new
                        {
                            Id = 35,
                            Description = "Residule management",
                            ModelComponentTypeId = 1,
                            Name = "RDMG",
                            SortOrder = 35
                        },
                        new
                        {
                            Id = 36,
                            Description = "Minimum tillage on high slope",
                            ModelComponentTypeId = 1,
                            Name = "MTHS",
                            SortOrder = 36
                        },
                        new
                        {
                            Id = 37,
                            Description = "Plant species in tame pasture",
                            ModelComponentTypeId = 1,
                            Name = "PSTPS",
                            SortOrder = 37
                        },
                        new
                        {
                            Id = 38,
                            Description = "Sustainable use of natural area",
                            ModelComponentTypeId = 1,
                            Name = "SUNA",
                            SortOrder = 38
                        },
                        new
                        {
                            Id = 39,
                            Description = "Irrigation management",
                            ModelComponentTypeId = 1,
                            Name = "IRRMG",
                            SortOrder = 39
                        },
                        new
                        {
                            Id = 40,
                            Description = "Fertilizer management",
                            ModelComponentTypeId = 1,
                            Name = "FERMG",
                            SortOrder = 40
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.Investor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Investor");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("ScenarioTypeId");

                    b.Property<int>("WatershedId");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioTypeId");

                    b.HasIndex("WatershedId");

                    b.ToTable("Scenario");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.ScenarioType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsBaseLine");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ScenarioType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Conventional",
                            IsBaseLine = true,
                            IsDefault = false,
                            Name = "Conventional",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Existing",
                            IsBaseLine = true,
                            IsDefault = true,
                            Name = "Existing",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.UnitScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPCombinationId");

                    b.Property<int>("ModelComponentId");

                    b.Property<int>("ScenarioId");

                    b.HasKey("Id");

                    b.HasIndex("BMPCombinationId");

                    b.HasIndex("ModelComponentId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("UnitScenario");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.UnitScenarioEffectiveness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPEffectivenessTypeId");

                    b.Property<int>("UnitScenarioId");

                    b.Property<decimal>("Value");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("BMPEffectivenessTypeId");

                    b.HasIndex("UnitScenarioId");

                    b.ToTable("UnitScenarioEffectiveness");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.WatershedExistingBMPType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPTypeId");

                    b.Property<int>("InvestorId");

                    b.Property<int>("ModelComponentId");

                    b.Property<int>("ScenarioTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BMPTypeId");

                    b.HasIndex("InvestorId");

                    b.HasIndex("ModelComponentId");

                    b.HasIndex("ScenarioTypeId");

                    b.ToTable("WatershedExistingBMPType");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ModelComponentId");

                    b.Property<int>("ScenarioId");

                    b.Property<int>("ScenarioModelResultTypeId");

                    b.Property<decimal>("Value");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentId");

                    b.HasIndex("ScenarioId");

                    b.HasIndex("ScenarioModelResultTypeId");

                    b.ToTable("ScenarioModelResult");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResultType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<int>("ModelComponentTypeId");

                    b.Property<string>("Name");

                    b.Property<int>("ScenarioModelResultVariableTypeId");

                    b.Property<int>("SortOrder");

                    b.Property<int>("UnitTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioModelResultVariableTypeId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("ScenarioModelResultType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Subarea yearly precipitation",
                            ModelComponentTypeId = 1,
                            Name = "Precipitation",
                            ScenarioModelResultVariableTypeId = 1,
                            SortOrder = 1,
                            UnitTypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            Description = "Suarea annual average temperature",
                            ModelComponentTypeId = 1,
                            Name = "Temperature",
                            ScenarioModelResultVariableTypeId = 2,
                            SortOrder = 2,
                            UnitTypeId = 4
                        },
                        new
                        {
                            Id = 3,
                            Description = "Subarea annual average soil water content",
                            ModelComponentTypeId = 1,
                            Name = "Soil moisture",
                            ScenarioModelResultVariableTypeId = 3,
                            SortOrder = 3,
                            UnitTypeId = 5
                        },
                        new
                        {
                            Id = 4,
                            Description = "Subarea yearly ET",
                            ModelComponentTypeId = 1,
                            Name = "ET",
                            ScenarioModelResultVariableTypeId = 4,
                            SortOrder = 4,
                            UnitTypeId = 6
                        },
                        new
                        {
                            Id = 5,
                            Description = "Subarea yearly GW recharge",
                            ModelComponentTypeId = 1,
                            Name = "Groundwater recharge",
                            ScenarioModelResultVariableTypeId = 5,
                            SortOrder = 5,
                            UnitTypeId = 7
                        },
                        new
                        {
                            Id = 6,
                            Description = "Subarea yearly runoff",
                            ModelComponentTypeId = 1,
                            Name = "Runoff",
                            ScenarioModelResultVariableTypeId = 6,
                            SortOrder = 6,
                            UnitTypeId = 8
                        },
                        new
                        {
                            Id = 7,
                            Description = "Subarea yearly TSS yield",
                            ModelComponentTypeId = 1,
                            Name = "TSS Yield",
                            ScenarioModelResultVariableTypeId = 7,
                            SortOrder = 7,
                            UnitTypeId = 9
                        },
                        new
                        {
                            Id = 8,
                            Description = "Subarea yearly DN yield",
                            ModelComponentTypeId = 1,
                            Name = "DN Yield",
                            ScenarioModelResultVariableTypeId = 8,
                            SortOrder = 8,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 9,
                            Description = "Subarea yearly PN yield",
                            ModelComponentTypeId = 1,
                            Name = "PN Yield",
                            ScenarioModelResultVariableTypeId = 9,
                            SortOrder = 9,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 10,
                            Description = "Subarea yearly TN yield",
                            ModelComponentTypeId = 1,
                            Name = "TN Yield",
                            ScenarioModelResultVariableTypeId = 10,
                            SortOrder = 10,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 11,
                            Description = "Subarea yearly DP yield",
                            ModelComponentTypeId = 1,
                            Name = "DP Yield",
                            ScenarioModelResultVariableTypeId = 11,
                            SortOrder = 11,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 12,
                            Description = "Subarea yearly PP yield",
                            ModelComponentTypeId = 1,
                            Name = "PP Yield",
                            ScenarioModelResultVariableTypeId = 12,
                            SortOrder = 12,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 13,
                            Description = "Subarea yearly TP yield",
                            ModelComponentTypeId = 1,
                            Name = "TP Yield",
                            ScenarioModelResultVariableTypeId = 13,
                            SortOrder = 13,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 14,
                            Description = "Subarea yearly average soil carbon sequestration",
                            ModelComponentTypeId = 1,
                            Name = "Soil carbon",
                            ScenarioModelResultVariableTypeId = 14,
                            SortOrder = 14,
                            UnitTypeId = 14
                        },
                        new
                        {
                            Id = 15,
                            Description = "Subarea yearly biodiversity index",
                            ModelComponentTypeId = 1,
                            Name = "Biodiversity",
                            ScenarioModelResultVariableTypeId = 15,
                            SortOrder = 15,
                            UnitTypeId = 15
                        },
                        new
                        {
                            Id = 16,
                            Description = "Annual average flow rate at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "Runoff reach outflow",
                            ScenarioModelResultVariableTypeId = 16,
                            SortOrder = 16,
                            UnitTypeId = 11
                        },
                        new
                        {
                            Id = 17,
                            Description = "Yearly TSS loading at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "TSS reach loading",
                            ScenarioModelResultVariableTypeId = 7,
                            SortOrder = 17,
                            UnitTypeId = 9
                        },
                        new
                        {
                            Id = 18,
                            Description = "Yearly DN loading at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "DN reach loading",
                            ScenarioModelResultVariableTypeId = 8,
                            SortOrder = 18,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 19,
                            Description = "Yearly PN loading at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "PN reach loading",
                            ScenarioModelResultVariableTypeId = 9,
                            SortOrder = 19,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 20,
                            Description = "Yearly TN loading at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "TN reach loading",
                            ScenarioModelResultVariableTypeId = 10,
                            SortOrder = 20,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 21,
                            Description = "Yearly DP loading at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "DP reach loading",
                            ScenarioModelResultVariableTypeId = 11,
                            SortOrder = 21,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 22,
                            Description = "Yearly PP loading at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "PP reach loading",
                            ScenarioModelResultVariableTypeId = 12,
                            SortOrder = 22,
                            UnitTypeId = 10
                        },
                        new
                        {
                            Id = 23,
                            Description = "Yearly TP loading at reach outlet",
                            ModelComponentTypeId = 2,
                            Name = "TP reach loading",
                            ScenarioModelResultVariableTypeId = 13,
                            SortOrder = 23,
                            UnitTypeId = 10
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResultVariableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ScenarioModelResultVariableType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Precipitation",
                            IsDefault = false,
                            Name = "Precipitation",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Temperature",
                            IsDefault = false,
                            Name = "Temperature",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Soil moisture",
                            IsDefault = false,
                            Name = "Soil moisture",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "ET",
                            IsDefault = false,
                            Name = "ET",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Groundwater recharge",
                            IsDefault = false,
                            Name = "Groundwater recharge",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Runoff",
                            IsDefault = false,
                            Name = "Runoff",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "TSS",
                            IsDefault = false,
                            Name = "TSS",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Description = "DN",
                            IsDefault = false,
                            Name = "DN",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "PN",
                            IsDefault = false,
                            Name = "PN",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = 10,
                            Description = "TN",
                            IsDefault = false,
                            Name = "TN",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 11,
                            Description = "DP",
                            IsDefault = false,
                            Name = "DP",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = 12,
                            Description = "PP",
                            IsDefault = false,
                            Name = "PP",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = 13,
                            Description = "TP",
                            IsDefault = true,
                            Name = "TP",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = 14,
                            Description = "Soil carbon",
                            IsDefault = false,
                            Name = "Soil carbon",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = 15,
                            Description = "Biodiversity",
                            IsDefault = false,
                            Name = "Biodiversity",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = 16,
                            Description = "Outflow",
                            IsDefault = false,
                            Name = "Outflow",
                            SortOrder = 16
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioResultSummarizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("ScenarioResultSummarizationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "LSD",
                            IsDefault = false,
                            Name = "LSD",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Parcel",
                            IsDefault = true,
                            Name = "Parcel",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Farm",
                            IsDefault = false,
                            Name = "Farm",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Municipality",
                            IsDefault = false,
                            Name = "Municipality",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Subwatershed",
                            IsDefault = false,
                            Name = "Subwatershed",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Watershed",
                            IsDefault = false,
                            Name = "Watershed",
                            SortOrder = 6
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("FromOptimization");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Solution");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.SolutionLegalSubDivisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPTypeId");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("LegalSubDivisionId");

                    b.Property<int>("SolutionId");

                    b.HasKey("Id");

                    b.HasIndex("BMPTypeId");

                    b.HasIndex("LegalSubDivisionId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SolutionLegalSubDivisions");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.SolutionModelComponents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPTypeId");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("ModelComponentId");

                    b.Property<int>("SolutionId");

                    b.HasKey("Id");

                    b.HasIndex("BMPTypeId");

                    b.HasIndex("ModelComponentId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SolutionModelComponents");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.SolutionParcels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BMPTypeId");

                    b.Property<bool>("IsSelected");

                    b.Property<int>("ParcelId");

                    b.Property<int>("SolutionId");

                    b.HasKey("Id");

                    b.HasIndex("BMPTypeId");

                    b.HasIndex("ParcelId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SolutionParcels");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Type.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UnitSymbol");

                    b.HasKey("Id");

                    b.ToTable("UnitType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Elevation",
                            Name = "Elevation",
                            SortOrder = 1,
                            UnitSymbol = "m"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Percentage",
                            Name = "Percentage",
                            SortOrder = 2,
                            UnitSymbol = "%"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Precipitation",
                            Name = "Precipitation",
                            SortOrder = 3,
                            UnitSymbol = "mm"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Temperature",
                            Name = "Temperature",
                            SortOrder = 4,
                            UnitSymbol = "oC"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Soil moisture",
                            Name = "Soil moisture",
                            SortOrder = 5,
                            UnitSymbol = "mm"
                        },
                        new
                        {
                            Id = 6,
                            Description = "ET",
                            Name = "ET",
                            SortOrder = 6,
                            UnitSymbol = "mm"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Groundwater recharge",
                            Name = "Groundwater recharge",
                            SortOrder = 7,
                            UnitSymbol = "mm"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Runoff",
                            Name = "Runoff",
                            SortOrder = 8,
                            UnitSymbol = "mm"
                        },
                        new
                        {
                            Id = 9,
                            Description = "TSS Yield",
                            Name = "TSS Yield",
                            SortOrder = 9,
                            UnitSymbol = "ton"
                        },
                        new
                        {
                            Id = 10,
                            Description = "N/P Yield",
                            Name = "N/P Yield",
                            SortOrder = 10,
                            UnitSymbol = "kg"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Flow",
                            Name = "Flow",
                            SortOrder = 11,
                            UnitSymbol = "m3/s"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Cost",
                            Name = "Cost",
                            SortOrder = 12,
                            UnitSymbol = "$"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Volume",
                            Name = "Volume",
                            SortOrder = 13,
                            UnitSymbol = "m3"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Soil carbon",
                            Name = "Soil carbon",
                            SortOrder = 14,
                            UnitSymbol = "ton"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Unitless",
                            Name = "Unitless",
                            SortOrder = 15,
                            UnitSymbol = "-"
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("DriverLicense");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastFourDigitOfSIN")
                        .HasMaxLength(4);

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Municipality");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Organization");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PostalCode");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("TaxRollNumber");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<int>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.UserMunicipalities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("MunicipalityId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMunicipalities");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.UserParcels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("ParcelId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParcelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserParcels");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admin",
                            Name = "Admin",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Watershed Manager",
                            Name = "Watershed Manager",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Municipality Manager",
                            Name = "Municipality Manager",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Farmer",
                            Name = "Farmer",
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.UserWatersheds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("UserId");

                    b.Property<int>("WatershedId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WatershedId");

                    b.ToTable("UserWatersheds");
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Boundary.Province", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.CatchBasin", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("CatchBasin")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.CatchBasin", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ClosedDrain", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithMany()
                        .HasForeignKey("ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Dugout", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.AnimalType", "AnimalType")
                        .WithMany()
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("Dugout")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.Dugout", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Feedlot", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.AnimalType", "AnimalType")
                        .WithMany()
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("Feedlot")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.Feedlot", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.FlowDiversion", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("FlowDiversion")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.FlowDiversion", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.GrassedWaterway", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("GrassedWaterway")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.GrassedWaterway", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.IsolatedWetland", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("IsolatedWetland")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.IsolatedWetland", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Lake", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("Lake")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.Lake", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ManureStorage", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("ManureStorage")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.ManureStorage", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponentType", "ModelComponentType")
                        .WithMany()
                        .HasForeignKey("ModelComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Watershed", "Watershed")
                        .WithMany("ModelComponents")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.ModelComponentBMPTypes", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithMany("ModelComponentBMPTypes")
                        .HasForeignKey("ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.PointSource", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("PointSource")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.PointSource", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Reach", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("Reach")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.Reach", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Subbasin", "Subbasin")
                        .WithOne("Reach")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.Reach", "SubbasinId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Reservoir", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("Reservoir")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.Reservoir", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.RiparianBuffer", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("RiparianBuffer")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.RiparianBuffer", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.RiparianWetland", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("GetRiparianWetland")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.RiparianWetland", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.RockChute", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("RockChute")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.RockChute", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.SmallDam", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("SmallDam")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.SmallDam", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.SubArea", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.LegalSubDivision", "LegalSubDivision")
                        .WithMany()
                        .HasForeignKey("LegalSubDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("SubArea")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Subbasin", "Subbasin")
                        .WithMany("SubAreas")
                        .HasForeignKey("SubbasinId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.SubWatershed", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Watershed", "Watershed")
                        .WithMany("SubWatersheds")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Subbasin", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubWatershed", "SubWatershed")
                        .WithMany("Subbasins")
                        .HasForeignKey("SubWatershedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.VegetativeFilterStrip", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("VegetativeFilterStrip")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.VegetativeFilterStrip", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ModelComponent.Wascob", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithOne("Wascob")
                        .HasForeignKey("AgBMPTool.DBModel.Model.ModelComponent.Wascob", "ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Reach", "Reach")
                        .WithMany()
                        .HasForeignKey("ReachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.SubArea", "SubArea")
                        .WithMany()
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.Optimization", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Optimization.OptimizationType", "OptimizationType")
                        .WithMany()
                        .HasForeignKey("OptimizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Project.Project", "Project")
                        .WithOne("Optimization")
                        .HasForeignKey("AgBMPTool.DBModel.Model.Optimization.Optimization", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationConstraints", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPEffectivenessType", "BMPEffectivenessType")
                        .WithMany()
                        .HasForeignKey("BMPEffectivenessTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Optimization.OptimizationConstraintValueType", "OptimizationConstraintValueType")
                        .WithMany()
                        .HasForeignKey("OptimizationConstraintValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Optimization.Optimization", "Optimization")
                        .WithMany("OptimizationConstraints")
                        .HasForeignKey("OptimizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationLegalSubDivisions", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.LegalSubDivision", "LegalSubDivision")
                        .WithMany()
                        .HasForeignKey("LegalSubDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Optimization.Optimization", "Optimization")
                        .WithMany("OptimizationLegalSubDivisions")
                        .HasForeignKey("OptimizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationParcels", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Optimization.Optimization", "Optimization")
                        .WithMany("OptimizationParcels")
                        .HasForeignKey("OptimizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Optimization.OptimizationWeights", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPEffectivenessType", "BMPEffectivenessType")
                        .WithMany()
                        .HasForeignKey("BMPEffectivenessTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Optimization.Optimization", "Optimization")
                        .WithMany("OptimizationWeights")
                        .HasForeignKey("OptimizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Project.Project", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Project.ProjectSpatialUnitType", "ProjectSpatialUnitType")
                        .WithMany()
                        .HasForeignKey("ProjectSpatialUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.ScenarioType", "ScenarioType")
                        .WithMany()
                        .HasForeignKey("ScenarioTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.User.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Project.ProjectMunicipalities", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Project.Project", "Project")
                        .WithMany("ProjectMunicipalities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Project.ProjectWatersheds", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Project.Project", "Project")
                        .WithMany("ProjectWatersheds")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Watershed", "Watershed")
                        .WithMany()
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPCombinationBMPTypes", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPCombinationType", "BMPCombinationType")
                        .WithMany("BMPCombinationTypeBMPTypes")
                        .HasForeignKey("BMPCombinationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPEffectivenessType", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPEffectivenessLocationType", "BMPEffectivenessLocationType")
                        .WithMany()
                        .HasForeignKey("BMPEffectivenessLocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Optimization.OptimizationConstraintValueType", "DefaultConstraintType")
                        .WithMany()
                        .HasForeignKey("DefaultConstraintTypeId");

                    b.HasOne("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResultType", "ScenarioModelResultType")
                        .WithMany()
                        .HasForeignKey("ScenarioModelResultTypeId");

                    b.HasOne("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResultVariableType", "ScenarioModelResultVariableType")
                        .WithMany()
                        .HasForeignKey("ScenarioModelResultVariableTypeId");

                    b.HasOne("AgBMPTool.DBModel.Model.Type.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.BMPType", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponentType", "ModelComponentType")
                        .WithMany()
                        .HasForeignKey("ModelComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.Scenario", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.ScenarioType", "ScenarioType")
                        .WithMany()
                        .HasForeignKey("ScenarioTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Watershed", "Watershed")
                        .WithMany("Scenarios")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.UnitScenario", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPCombinationType", "BMPCombination")
                        .WithMany()
                        .HasForeignKey("BMPCombinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithMany()
                        .HasForeignKey("ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.Scenario", "Scenario")
                        .WithMany("UnitScenarios")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.UnitScenarioEffectiveness", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPEffectivenessType", "BMPEffectivenessType")
                        .WithMany()
                        .HasForeignKey("BMPEffectivenessTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.UnitScenario", "UnitScenario")
                        .WithMany("UnitScenarioEffectivenesses")
                        .HasForeignKey("UnitScenarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Scenario.WatershedExistingBMPType", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.Investor", "Investor")
                        .WithMany()
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithMany()
                        .HasForeignKey("ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.ScenarioType", "ScenarioType")
                        .WithMany()
                        .HasForeignKey("ScenarioTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResult", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithMany()
                        .HasForeignKey("ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.Scenario", "Scenario")
                        .WithMany("ScenarioModelResults")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResultType", "ScenarioModelResultType")
                        .WithMany()
                        .HasForeignKey("ScenarioModelResultTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResultType", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.ScenarioModelResult.ScenarioModelResultVariableType", "ScenarioModelResultVariableType")
                        .WithMany()
                        .HasForeignKey("ScenarioModelResultVariableTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Type.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.Solution", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Project.Project", "Project")
                        .WithOne("Solution")
                        .HasForeignKey("AgBMPTool.DBModel.Model.Solution.Solution", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.SolutionLegalSubDivisions", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.LegalSubDivision", "LegalSubDivision")
                        .WithMany()
                        .HasForeignKey("LegalSubDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Solution.Solution", "Solution")
                        .WithMany("SolutionLegalSubDivisions")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.SolutionModelComponents", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.ModelComponent", "ModelComponent")
                        .WithMany()
                        .HasForeignKey("ModelComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Solution.Solution", "Solution")
                        .WithMany("SolutionModelComponents")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.Solution.SolutionParcels", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Scenario.BMPType", "BMPType")
                        .WithMany()
                        .HasForeignKey("BMPTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.Solution.Solution", "Solution")
                        .WithMany("SolutionParcels")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.User", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.User.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.UserMunicipalities", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.User.User", "User")
                        .WithMany("UserMunicipalities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.UserParcels", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.Boundary.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.User.User", "User")
                        .WithMany("UserParcels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgBMPTool.DBModel.Model.User.UserWatersheds", b =>
                {
                    b.HasOne("AgBMPTool.DBModel.Model.User.User", "User")
                        .WithMany("UserWatersheds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgBMPTool.DBModel.Model.ModelComponent.Watershed", "Watershed")
                        .WithMany()
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
